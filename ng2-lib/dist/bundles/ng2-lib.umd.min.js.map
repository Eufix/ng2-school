{"version":3,"file":"ng2-lib.umd.min.js","sources":["~/ng2-lib/showcase/attr.directive.ts","~/ng2-lib/showcase/struct.directive.ts","~/ng2-lib/showcase/showcase.module.ts"],"sourcesContent":["import { Directive, HostListener, ElementRef, Input } from '@angular/core';\n\n@Directive({\n  selector: '[scAttr]'\n})\nexport class AttrDirective {\n  private originalColor: string = null;\n\n  @Input('scAttr') scAttr: string;\n\n  constructor(private el: ElementRef) { }\n\n  @HostListener('mouseenter') handleMouseEnter() {\n    if (this.originalColor == null) {\n      this.originalColor = this.el.nativeElement.style.backgroundColor;\n    }\n    this.highlight(this.scAttr || 'red');\n  }\n\n  @HostListener('mouseleave') handleMouseLeave() {\n    this.highlight(this.originalColor);\n    this.originalColor = null;\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n\n}\n","import { Directive, TemplateRef, ViewContainerRef, Input } from '@angular/core';\n\n@Directive({\n  selector: '[scStruct]'\n})\nexport class StructDirective {\n  private hasView = false;\n\n  constructor(\n    private templateRef: TemplateRef<any>,\n    private viewContainer: ViewContainerRef\n  ) { }\n\n  @Input() set scStruct(condition: boolean) {\n    if (condition && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!condition && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AttrDirective } from './attr.directive';\nimport { StructDirective } from './struct.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [AttrDirective, StructDirective],\n  exports: [AttrDirective, StructDirective]\n})\nexport class ShowcaseModule { }\n"],"names":["exports","ɵa","AttrDirective","el","this","originalColor","prototype","handleMouseEnter","nativeElement","style","backgroundColor","highlight","scAttr","handleMouseLeave","color","__decorate","Input","HostListener","Directive","selector","__metadata","ElementRef","ɵb","StructDirective","templateRef","viewContainer","hasView","Object","defineProperty","set","condition","createEmbeddedView","clear","TemplateRef","ViewContainerRef","ShowcaseModule","NgModule","imports","CommonModule","declarations"],"mappings":"oxBAAAA,EAAAC,GAAA,WAUE,SAAFC,EAAsBC,GAAAC,KAAtBD,GAAsBA,EAJZC,KAAVC,cAAkC,KAsBlC,OAhB8BH,EAA9BI,UAAAC,iBAA8B,WACA,MAAtBH,KAAKC,gBACPD,KAAKC,cAAgBD,KAAKD,GAAGK,cAAcC,MAAMC,iBAEnDN,KAAKO,UAAUP,KAAKQ,QAAU,QAGJV,EAA9BI,UAAAO,iBAA8B,WAC1BT,KAAKO,UAAUP,KAAKC,eACpBD,KAAKC,cAAgB,MAGfH,EAAVI,UAAAK,UAAU,SAAUG,GAChBV,KAAKD,GAAGK,cAAcC,MAAMC,gBAAkBI,GAGlDZ,EAvB0B,GAGPa,GAAhBC,EAAAA,MAAM,mCAATd,EAAAA,GAAAI,UAAA,cAAA,GAI8BS,GAA3BE,EAAAA,aAAa,iGAKhBf,EAAAA,GAAAI,UAAA,mBAAA,MAE8BS,GAA3BE,EAAAA,aAAa,iGAGhBf,EAAAA,GAAAI,UAAA,mBAAA,MAjBaJ,EAAAA,GAAba,GAHCG,EAAAA,WACCC,SAAU,aAOZC,EAAA,qBAA0BC,EAAAA,cALbnB,EAAAA,2eCLbF,EAAAsB,GAAA,WAQE,SAAFC,EACYC,EACAC,GADArB,KAAZoB,YAAYA,EACApB,KAAZqB,cAAYA,EAJFrB,KAAVsB,SAAoB,EAiBpB,OAVWC,OAAXC,eAAeL,EAAfjB,UAAA,YAAAuB,IAAW,SAAaC,GAChBA,IAAc1B,KAAKsB,SACrBtB,KAAKqB,cAAcM,mBAAmB3B,KAAKoB,aAC3CpB,KAAKsB,SAAU,IACLI,GAAa1B,KAAKsB,UAC5BtB,KAAKqB,cAAcO,QACnB5B,KAAKsB,SAAU,oCAIrBH,EAlB4B,GAQjBR,GAARC,EAAAA,mEAQHO,EAAAA,GAAAjB,UAAA,WAAA,MAhBaiB,EAAAA,GAAbR,GAHCG,EAAAA,WACCC,SAAU,eAMZC,EAAA,qBAAyBa,EAAAA,YACEC,EAAAA,oBALdX,EAAAA,qWCLbvB,EAAAmC,eAAA,WAYA,OAAA,aAA2B,GAAdA,EAAAA,eAAbpB,GAPCqB,EAAAA,UACCC,SACEC,EAAAA,cAEFC,cAAerC,EAAAA,GAAeqB,EAAAA,IAC9BvB,SAAUE,EAAAA,GAAeqB,EAAAA,OAEdY,EAAAA"}
